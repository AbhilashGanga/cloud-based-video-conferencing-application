import json
import os
import boto3
from botocore.exceptions import ClientError
from datetime import datetime, timedelta
import threading
import time
import urllib

from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart

DB = boto3.resource(
   'dynamodb',
)

table_name = "meeting-details"
mutex = threading.Lock()

def lambda_handler(event, context):
    # TODO implement
    print(event)

    meeting_id = event['headers']["meetingid"]
    #meeting_id = "RIPSKPNUG"
    print(meeting_id)
    meeting_details = lookup_data({'meetingID': meeting_id})
    email_data = ""
    trs_data = ""

    transcriptUrl = "https://cvc-meeting-recordings.s3.amazonaws.com/" + meeting_id + "/" + meeting_id + "_cgpt_analysis.txt"
    transcriptS3Url = transcriptUrl
    try:
        response = urllib.request.urlopen(transcriptS3Url)
        transcript = response.read().decode('utf-8')
        trs_data += "Transcript of chat GPT: " + transcript + '\n'
        transcriptS3Url = "https://cvc-meeting-recordings.s3.amazonaws.com/" + meeting_id + "/" + meeting_id + "_english_transcript.txt"
        response = urllib.request.urlopen(transcriptS3Url)
        transcript = response.read().decode('utf-8')
        trs_data += "Transcript in English: " + transcript + '\n'
        transcriptS3Url = "https://cvc-meeting-recordings.s3.amazonaws.com/" + meeting_id + "/" + meeting_id + "_german_transcript.txt"
        response = urllib.request.urlopen(transcriptS3Url)
        transcript = response.read().decode('utf-8')
        trs_data += "Transcript in German: " + transcript + '\n'
        transcriptS3Url = "https://cvc-meeting-recordings.s3.amazonaws.com/" + meeting_id + "/" + meeting_id + "_hindi_transcript.txt"
        response = urllib.request.urlopen(transcriptS3Url)
        transcript = response.read().decode('utf-8')
        trs_data += "Transcript in Hindi: " + transcript + '\n'
        transcriptS3Url = "https://cvc-meeting-recordings.s3.amazonaws.com/" + meeting_id + "/" + meeting_id + "_chinese_transcript.txt"
        response = urllib.request.urlopen(transcriptS3Url)
        transcript = response.read().decode('utf-8')
        trs_data += "Transcript in Chinese: " + transcript + '\n'
        transcriptS3Url = "https://cvc-meeting-recordings.s3.amazonaws.com/" + meeting_id + "/" + meeting_id + "_spanish_transcript.txt"
        response = urllib.request.urlopen(transcriptS3Url)
        transcript = response.read().decode('utf-8')
        trs_data += "Transcript in Spanish: " + transcript + '\n'
        videoUrl = "https://cvc-meeting-recordings.s3.amazonaws.com/" + meeting_id + "/" + meeting_id + ".mp4"
        trs_data += "Video Link: " + videoUrl + '\n'
    except Exception as e:
        trs_data = "Recording not analysed yet"
        print(e)
    trs_data += '\n\n'
    print(trs_data)
    email_data += trs_data


    for participant in meeting_details["participants"]:
        participant_details = lookup_data({'userId': participant}, table = "meeting-analysis")
        try:
            available_sessions = participant_details["available"]
            if participant not in available_sessions:
                available_sessions.append(meeting_id)
        except:
            available_sessions = [meeting_id]

        mutex.acquire()
        try:
            update_item({'userId': participant}, 'available', available_sessions, table = "meeting-analysis")
        finally:
            mutex.release()

        for meeting in participant_details["meetings"]:
            if meeting_id == meeting["meetingId"]:
                dets = lookup_data({'userId': participant}, table = "email_data")
                if meeting_details["host"] != participant:
                    print(dets["email"])
                    print("inside")
                    send_email(dets["email"], trs_data + dets["email"] + '\n' + str(meeting))
                email_data += dets["email"] + '\n' + str(meeting) + '\n\n'
                break

    dets = lookup_data({'userId': meeting_details["host"]}, table = "email_data")
    print(dets["email"])
    print(email_data)
    send_email(dets["email"], str(email_data))

    headers = {
        "Access-Control-Allow-Origin": "*",  # Replace * with your allowed origin(s)
        "Access-Control-Allow-Headers": "Content-Type, meetingid",  # Include allowed headers
        "Access-Control-Allow-Methods": "OPTIONS,POST,GET"  # Include allowed methods
    }
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!'),
        'headers': headers
    }


def insert_data(data, db=None, table=table_name):
    if not db:
        db = DB
    table = db.Table(table)
    with table.batch_writer() as batch:
        # overwrite if the same index is provided
        response = table.put_item(Item=data)
    return response

def lookup_data(key, db=None, table=table_name):
    if not db:
        db = DB
    table = db.Table(table)
    try:
        response = table.get_item(Key=key)
    except ClientError as e:
        print('Error', e.response['Error']['Message'])
    else:
        try:
            return response['Item']
        except:
            return "Error"

def update_item(key, feature_key, feature_value, db=None, table=table_name):
    if not db:
        db = DB
    table = db.Table(table)
    # change student location
    response = table.update_item(
        Key=key,
        UpdateExpression="set #feature=:f",
        ExpressionAttributeValues={
            ':f': feature_value
        },
        ExpressionAttributeNames={
            "#feature": feature_key
        },
        ReturnValues="UPDATED_NEW"
    )
    return response

def delete_item(key, db=None, table=table_name):
    if not db:
        db = DB
    table = db.Table(table)
    try:
        response = table.delete_item(Key=key)
    except ClientError as e:
        print('Error', e.response['Error']['Message'])
    else:
        return response

def send_email(recipient_email, body):
    CHARSET = "utf-8"
    client = boto3.client('ses')
    Sender = "ag4797@columbia.edu"
    msg = MIMEMultipart('mixed')
    msg['Subject'] = "Meeting details"
    msg['From'] = Sender
    msg['To'] = recipient_email

    msg_body = MIMEMultipart('alternative')

    textpart = MIMEText(body.encode(CHARSET), 'plain', CHARSET)

    msg_body.attach(textpart)
    msg.attach(msg_body)

    try:
        response = client.send_raw_email(
            Source=Sender,
            Destinations=[
                recipient_email
            ],
            RawMessage={
                'Data':msg.as_string(),
            })
    except ClientError as e:
        print(e.response['Error']['Message'])
    else:
        print("Email sent! Message ID:"),
        print(response['MessageId'])
